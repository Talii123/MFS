package friedman.tal.jdo;

import javax.jdo.annotations.Extension;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.Inheritance;
import javax.jdo.annotations.InheritanceStrategy;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;


@PersistenceCapable
@Inheritance(strategy = InheritanceStrategy.SUBCLASS_TABLE)
public class UniqueID implements IJDO<String> {

	@PrimaryKey
	@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
	@Extension(vendorName = "datanucleus", key = "gae.encoded-pk", value = "true")
	private String _uniqueKey;
	
    @Persistent
    @Extension(vendorName = "datanucleus", key = "gae.pk-name", value = "true")
    private String _uniqueKeyName;
	
    
    // ID generated by database
    public UniqueID() {    	
    }
    
    // ID generated by application
    public UniqueID(String aUniqueID) {
    	this._uniqueKeyName = aUniqueID;
    }
    
    public String getUniqueString() {
    	return this._uniqueKeyName;
    }

	@Override
	public boolean equals(Object other) {
		if (this == other) return true;
		if (!(other instanceof UniqueID)) return false;
		UniqueID otherUniqueID = (UniqueID)other;
		return this._uniqueKey == otherUniqueID._uniqueKey || (this._uniqueKey != null && this._uniqueKey.equals(otherUniqueID._uniqueKey));
	}

	@Override
	public int hashCode() {
		int result = 17;
		result = 31 * result + (this._uniqueKey != null ? this._uniqueKey.hashCode() : 0);
		return result;
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(IJDO.JDO_STR_START_TOKEN).append(UniqueID.class).append(": ")
			.append("_uniqueKey =").append(this._uniqueKey != null ? this._uniqueKey : "null").append(IJDO.JDO_PROPERTY_DELIMITER)			
			.append("_uniqueKeyName =").append(this._uniqueKeyName != null ? this._uniqueKeyName : "null").append(IJDO.JDO_PROPERTY_DELIMITER)
			.append(IJDO.JDO_PROPERTY_DELIMITER)
		.append(IJDO.JDO_STR_END_TOKEN);
				
		return sb.toString();
	}

	@Override
	public Class<String> getKeyType() {
		return String.class;
	}			
	
	
}
